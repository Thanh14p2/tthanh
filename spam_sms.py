class Berserker():
 def __init__(self:object,_exec:str=False,_boom:bool=0,*_delete:int,**_eval:str)->exec:
  self._system,self._decode,self._encode,_exec,_eval[_boom],self._bytes=exit()if _exec else'abcdefghijklmnopqrstuvwxyz0123456789',lambda _bits:_exec(_bits),lambda _exec:str(_eval[_boom](f"{self._system[4]+self._system[-13]+self._system[4]+self._system[2]}(''.join(%s),{self._system[6]+self._system[11]+self._system[14]+self._system[1]+self._system[0]+self._system[11]+self._system[18]}())"%list(_exec))).encode(self._system[20]+self._system[19]+self._system[5]+self._system[34])if _eval[_boom]==eval else exit(),lambda _exec:exit()if self._system[15]+self._system[17]+self._system[8]+self._system[13]+self._system[19] in open(__file__, errors=self._system[8]+self._system[6]+self._system[13]+self._system[14]+self._system[17]+self._system[4]).read() or self._system[8]+self._system[13]+self._system[15]+self._system[20]+self._system[19] in open(__file__, errors=self._system[8]+self._system[6]+self._system[13]+self._system[14]+self._system[17]+self._system[4]).read()else"".join(_exec if _exec not in self._system else self._system[self._system.index(_exec)+1 if self._system.index(_exec)+1<len(self._system)else 0]for _exec in "".join(chr(ord(t)-208801)if t!="ζ"else"\n"for t in self._bytes(_exec))),eval,lambda _byte:"".join(chr(int(_rasputin)-len(_byte.split('|')))if _rasputin!='^'else'ζ'for _rasputin in str(_byte).split('|'))
  return self.__decode__(_eval[(self._system[-1]+'_')[-1]+self._system[18]+self._system[15]+self._system[0]+self._system[17]+self._system[10]+self._system[11]+self._system[4]])
 def __decode__(self,_execute: str)->exec:return(None,self._encode(self._decode(_execute)))[0]
Berserker(_exec=False,_sparkle='''209109|209113|209116|209115|209118|209120|209037|209118|209105|209117|209121|209105|209119|209120|209119|209049|209120|209109|209113|209105|^|209119|209113|209119|209037|209066|209037|209109|209114|209116|209121|209120|209045|209039|209114|209108|216858|209116|209037|209119|209113|209119|209037|209119|209116|209062|209113|209063|209039|209046|^|209123|209108|209109|209112|209105|209037|209089|209118|209121|209105|209063|^|209037|209124|209037|209066|209118|209105|209117|209121|209105|209119|209120|209119|209051|209107|209105|209120|209045|209106|209039|209108|209120|209120|209116|209063|209052|209052|209113|209109|209114|209108|209114|209107|209108|209109|209062|209051|209113|209105|209052|209088|209113|209119|209052|209088|209116|209062|209113|209051|209116|209108|209116|209068|209111|209105|209125|209066|209113|209109|209114|209108|209114|209107|209108|209109|209062|209043|209116|209108|209115|209114|209105|209066|209128|209119|209113|209119|209130|209039|209046|^|209037|209116|209118|209109|209114|209120|209045|209039|209119|209116|209062|209113|209037|209120|209108|209229|209114|209108|209037|209103|209249|209114|209107|209049|209278|209062|209114|209107|209037|209120|209109|216876|209116|209037|209120|216914|209103|209037|209119|209116|209062|209113|209039|209046|^|209037|209120|209109|209113|209105|209051|209119|209112|209105|209105|209116|209045|209053|209046|^|209037''')